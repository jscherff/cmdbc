// Copyright 2017 John Scherff
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	`flag`
	`log`
	`os`
	`sync`
	`testing`
	`github.com/google/gousb`
	`github.com/jscherff/gocmdb/usbci`
)

var (
	mag1JSON = []byte(
		`{
			"host_name": "John-SurfacePro",
			"vendor_id": "0801",
			"product_id": "0001",
			"vendor_name": "Mag-Tek",
			"product_name": "USB Swipe Reader",
			"serial_num": "24FFFFF",
			"software_id": "21042840G01",
			"product_ver": "V05",
			"bus_number": 1,
			"bus_address": 7,
			"port_number": 1,
			"buffer_size": 60,
			"max_pkt_size": 8,
			"usb_spec": "1.10",
			"usb_class": "per-interface",
			"usb_subclass": "per-interface",
			"usb_protocol": "0",
			"device_speed": "full",
			"device_ver": "1.00",
			"object_type": "*usbci.Magtek",
			"device_sn": "24FFFFF",
			"factory_sn": "B164F78022713AA",
			"descriptor_sn": "24FFFFF"
		}`,
	)

	mag2JSON = []byte(
		`{
			"host_name": "John-SurfacePro",
			"vendor_id": "0801",
			"product_id": "0001",
			"vendor_name": "Mag-Tek",
			"product_name": "USB Swipe Reader",
			"serial_num": "24FFFFF",
			"software_id": "21042840G02",
			"product_ver": "V05",
			"bus_number": 1,
			"bus_address": 7,
			"port_number": 1,
			"buffer_size": 60,
			"max_pkt_size": 8,
			"usb_spec": "2.00",
			"usb_class": "per-interface",
			"usb_subclass": "per-interface",
			"usb_protocol": "0",
			"device_speed": "full",
			"device_ver": "1.00",
			"object_type": "*usbci.Magtek",
			"device_sn": "24FFFFF",
			"factory_sn": "B164F78022713AA",
			"descriptor_sn": "24FFFFF"
		}`,
	)

	gen1JSON = []byte(
		`{
			"host_name": "John-SurfacePro",
			"vendor_id": "0acd",
			"product_id": "2030",
			"vendor_name": "ID TECH",
			"product_name": "TM3 Magstripe USB-HID Keyboard Reader",
			"serial_num": "",
			"software_id": "",
			"product_ver": "",
			"bus_number": 1,
			"bus_address": 8,
			"port_number": 1,
			"buffer_size": 0,
			"max_pkt_size": 8,
			"usb_spec": "2.00",
			"usb_class": "per-interface",
			"usb_subclass": "per-interface",
			"usb_protocol": "0",
			"device_speed": "full",
			"device_ver": "1.00",
			"object_type": "*usbci.Generic",
			"device_sn": "",
			"factory_sn": "",
			"descriptor_sn": ""
		}`,
	)

	gen2JSON = []byte(
		`{
			"host_name": "John-SurfacePro",
			"vendor_id": "0acd",
			"product_id": "2030",
			"vendor_name": "ID TECH",
			"product_name": "TM4 Magstripe USB-HID Keyboard Reader",
			"serial_num": "",
			"software_id": "",
			"product_ver": "",
			"bus_number": 1,
			"bus_address": 8,
			"port_number": 1,
			"buffer_size": 0,
			"max_pkt_size": 8,
			"usb_spec": "2.00",
			"usb_class": "per-interface",
			"usb_subclass": "per-interface",
			"usb_protocol": "0",
			"device_speed": "full",
			"device_ver": "1.00",
			"object_type": "*usbci.Generic",
			"device_sn": "",
			"factory_sn": "",
			"descriptor_sn": ""
		}`,
	)
	mag1SigPJSON = [32]byte{
		0xd5,0x00,0x54,0xe8,0xe9,0x94,0x86,0x42,
		0x0f,0xa9,0xe8,0x16,0x30,0xcf,0x1f,0x55,
		0x8c,0x67,0x0b,0xc8,0xca,0x52,0x52,0x27,
		0xf5,0xee,0xe4,0xec,0x58,0x26,0x76,0x1c,
	}

	mag1SigPXML = [32]byte{
		0x50,0x29,0x8f,0xae,0x95,0xce,0x7c,0x1f,
		0x16,0x8d,0x95,0xa2,0xec,0x6e,0x46,0x73,
		0x39,0x01,0x7b,0xd2,0x50,0x0d,0x32,0x18,
		0x7c,0x03,0x02,0x95,0xc6,0x40,0x67,0x3c,
	}

	mag1SigJSON = [32]byte{
		0x82,0xc5,0xb8,0xe9,0xa4,0x76,0x48,0xba,
		0x73,0xa8,0xf1,0xb3,0xa1,0x1c,0xa3,0x06,
		0xa7,0xd6,0x2f,0xca,0xe9,0x61,0x41,0xe1,
		0xb0,0x8f,0x57,0x89,0x79,0x37,0x3e,0xca,
	}

	mag1SigXML = [32]byte{
		0xcc,0x5d,0x9b,0xa0,0x41,0x90,0x99,0xfe,
		0xdd,0x2f,0x1f,0x98,0xa4,0xee,0x17,0x22,
		0x9f,0x51,0x18,0x14,0x4a,0x17,0xb1,0x26,
		0x9a,0x62,0xa8,0xdc,0xcb,0x9d,0xbf,0x56,
	}

	mag1SigCSV = [32]byte{
		0xc6,0x8d,0xf6,0x19,0x45,0x89,0x68,0xb3,
		0x77,0xe6,0x73,0xef,0xcd,0x78,0x28,0x17,
		0x6c,0x75,0xa2,0x3b,0x3b,0xae,0x41,0x71,
		0x4e,0x0f,0x23,0x61,0x91,0xea,0xf5,0x8a,
	}

	mag1SigNVP = [32]byte{
		0x99,0x73,0x35,0x56,0x27,0x46,0x73,0x0d,
		0xb6,0xe9,0x25,0xa2,0x90,0xa1,0xc6,0x03,
		0x03,0xe2,0x32,0x7c,0x80,0xf2,0x42,0xed,
		0xb8,0x34,0x38,0xc3,0x21,0x5f,0xb7,0x5a,
	}

	mag1SigLegacy = [32]byte{
		0x1e,0xec,0xbe,0x7a,0x47,0x97,0x35,0x9d,
		0xe1,0x37,0xf0,0x49,0x45,0xd4,0xcb,0x50,
		0x69,0xa2,0x3c,0x2a,0x0d,0xc8,0x00,0xcc,
		0xce,0x65,0x8a,0x8d,0x37,0x70,0x6e,0x3d,
	}

	mag2SigPJSON = [32]byte{
		0x4d,0xf6,0xb4,0x8e,0x08,0xab,0x37,0x03,
		0xa6,0x2d,0xbc,0x26,0xf6,0xe7,0x01,0x06,
		0xc0,0x55,0x79,0x84,0xbf,0x88,0x6e,0x2b,
		0x74,0x58,0xc0,0x66,0x00,0x8f,0x60,0x87,
	}

	mag2SigPXML = [32]byte{
		0x75,0x45,0x5c,0xaf,0x4a,0xa6,0x3e,0x5e,
		0x9f,0x39,0x52,0x8f,0x33,0x50,0x24,0x6c,
		0x47,0x10,0x36,0x5f,0x3b,0x13,0x49,0x2c,
		0x3d,0x2f,0x21,0xad,0x99,0xf4,0xb7,0xc0,
	}

	mag2SigJSON = [32]byte{
		0x12,0x0f,0x9b,0x0b,0x55,0xa2,0x7a,0x2a,
		0x47,0xc7,0xff,0x70,0xd4,0x80,0xe9,0xf7,
		0xaa,0x15,0x0c,0xaf,0xc0,0xa3,0x85,0xc4,
		0x06,0x75,0x0f,0x9a,0x97,0x94,0x3f,0x3d,
	}

	mag2SigXML = [32]byte{
		0xc9,0xb9,0x84,0x48,0x66,0xd2,0xb4,0x98,
		0x9a,0x90,0x15,0xcf,0xa6,0xb1,0x65,0x5f,
		0x62,0xa7,0xc2,0xbb,0x26,0xd2,0x97,0xeb,
		0x6e,0x9e,0x22,0xaa,0x90,0x9f,0x1d,0xd7,
	}

	mag2SigCSV = [32]byte{
		0x52,0xe5,0x66,0xba,0xba,0x14,0x82,0x15,
		0xb7,0xd3,0x83,0x1e,0x88,0xc0,0x54,0xb4,
		0x63,0xf0,0xa7,0xcd,0x5a,0x9e,0x4b,0xd6,
		0x90,0xc6,0x40,0x97,0xa4,0x4f,0x01,0xbf,
	}

	mag2SigNVP = [32]byte{
		0x56,0x35,0x90,0x78,0xa3,0xcf,0xd7,0x03,
		0x0f,0x07,0x1e,0xc8,0xe4,0xf4,0x93,0x72,
		0xdb,0xa6,0xe4,0x68,0x0c,0xb0,0xcc,0xc0,
		0x0e,0xa8,0xb9,0x7d,0x3b,0x37,0x3a,0x73,
	}

	mag2SigLegacy = [32]byte{
		0x1e,0xec,0xbe,0x7a,0x47,0x97,0x35,0x9d,
		0xe1,0x37,0xf0,0x49,0x45,0xd4,0xcb,0x50,
		0x69,0xa2,0x3c,0x2a,0x0d,0xc8,0x00,0xcc,
		0xce,0x65,0x8a,0x8d,0x37,0x70,0x6e,0x3d,
	}

	gen1SigPJSON = [32]byte{
		0x8a,0x52,0xbe,0xd2,0x52,0x38,0x02,0x70,
		0x9e,0xc2,0xd9,0x53,0xeb,0xbb,0x99,0x1d,
		0x23,0x1d,0xf8,0x51,0x32,0xce,0x61,0x5f,
		0x0e,0x83,0xb2,0x01,0xc3,0xe8,0x4f,0x4e,
	}

	gen1SigPXML = [32]byte{
		0x8e,0x2c,0xf1,0x5f,0x79,0x44,0xa9,0x48,
		0x77,0x93,0xc9,0x66,0xfb,0xe8,0xe3,0x22,
		0x7f,0x3f,0xd6,0xdf,0x73,0x49,0xdf,0x1e,
		0x2f,0xe5,0x7c,0x18,0xcc,0x23,0xd5,0x92,
	}

	gen1SigJSON = [32]byte{
		0xca,0xd1,0x50,0xfb,0x30,0xe0,0x8b,0xb2,
		0x97,0x3e,0xa7,0x7b,0x6b,0x82,0x3b,0xc2,
		0x60,0x29,0x29,0xdc,0xc6,0xd0,0x26,0xa3,
		0xad,0x3b,0x89,0x65,0x77,0x4b,0xd6,0xa2,
	}

	gen1SigXML = [32]byte{
		0xd7,0x43,0xde,0x2a,0x94,0xe0,0xa8,0x3a,
		0x10,0xd0,0xa3,0x49,0xb8,0x13,0x26,0x62,
		0x5c,0x6f,0xb3,0x7b,0xc0,0x2a,0x63,0x16,
		0xb5,0xbd,0x97,0xc1,0x89,0x64,0xd7,0x3d,
	}

	gen1SigCSV = [32]byte{
		0x7c,0xe0,0x04,0x96,0x62,0x2f,0xea,0x24,
		0xb1,0x80,0x7f,0x86,0x80,0xe4,0xce,0xae,
		0xad,0x7b,0x7b,0x5a,0xee,0x99,0xb8,0x15,
		0x25,0x27,0x18,0x11,0x04,0xaa,0x0a,0x97,
	}

	gen1SigNVP = [32]byte{
		0x0b,0xcf,0xed,0x21,0x18,0xf7,0x7a,0xb8,
		0x28,0x11,0xab,0x99,0xf1,0x34,0x41,0x4d,
		0x10,0xe5,0xa1,0x7e,0xa5,0x8d,0x29,0xd1,
		0x7c,0x5a,0xe9,0x29,0xd0,0x11,0x4d,0x31,
	}

	gen1SigLegacy = [32]byte{
		0x20,0x43,0xb9,0xa2,0xa0,0x1d,0x52,0xe5,
		0x5d,0x78,0x4a,0xee,0xc2,0xbc,0xed,0xb8,
		0x32,0x26,0x91,0x96,0xea,0xc2,0x60,0xce,
		0x81,0x87,0xe8,0x84,0xdd,0x2d,0x07,0x0a,
	}

	gen2SigPJSON = [32]byte{
		0x00,0x65,0xc1,0xac,0xe7,0x08,0x07,0xdd,
		0x0a,0xe9,0x54,0xc9,0x78,0x36,0x5e,0x6b,
		0xe7,0xa5,0xf2,0xba,0x81,0xe8,0x27,0x50,
		0x05,0x74,0x68,0xda,0xf1,0x07,0x3e,0x7b,
	}

	gen2SigPXML = [32]byte{
		0x72,0xbd,0xe8,0x6f,0x45,0x48,0xa2,0x80,
		0x56,0xba,0x9f,0x23,0x41,0x8c,0x50,0xb7,
		0xa1,0xc4,0x7b,0x69,0x47,0xd2,0xaf,0x8d,
		0x00,0x28,0xe2,0xa3,0x6f,0x8c,0x06,0x21,
	}

	gen2SigJSON = [32]byte{
		0xd9,0x14,0xd8,0xc2,0x8d,0xc2,0xc1,0x6d,
		0xf5,0x3e,0x73,0x8e,0x89,0x71,0x44,0xb6,
		0xc5,0x1d,0xff,0xe1,0x42,0xe6,0x79,0xb8,
		0x0b,0xa5,0x53,0x1c,0x94,0xdf,0x52,0xf2,
	}

	gen2SigXML = [32]byte{
		0xc5,0x7f,0x9b,0x7d,0x0f,0xd3,0xe5,0x42,
		0x1a,0xd8,0x8d,0x70,0x86,0xce,0xd4,0x55,
		0x02,0x3b,0x19,0x0f,0xdb,0xac,0xe1,0xb7,
		0x38,0x11,0x87,0x69,0x42,0x14,0xba,0xf7,
	}

	gen2SigCSV = [32]byte{
		0xe2,0xed,0x6d,0x01,0x20,0x02,0xa5,0xfd,
		0xb4,0xab,0xda,0x7d,0x7a,0xde,0x06,0xd5,
		0x18,0x14,0x6a,0x59,0xf0,0xe4,0xb6,0x01,
		0xda,0x73,0x99,0x6c,0x81,0xe9,0x24,0xf6,
	}

	gen2SigNVP = [32]byte{
		0xa3,0xb7,0xf6,0x20,0xe4,0xa7,0x7a,0xa6,
		0x72,0xb1,0x8e,0xb7,0xd1,0x75,0x74,0xa2,
		0x8f,0xcf,0x8c,0x8a,0xef,0x72,0x37,0xab,
		0xe8,0x03,0x61,0xea,0xd7,0xd0,0x0c,0x25,
	}

	gen2SigLegacy = [32]byte{
		0x20,0x43,0xb9,0xa2,0xa0,0x1d,0x52,0xe5,
		0x5d,0x78,0x4a,0xee,0xc2,0xbc,0xed,0xb8,
		0x32,0x26,0x91,0x96,0xea,0xc2,0x60,0xce,
		0x81,0x87,0xe8,0x84,0xdd,0x2d,0x07,0x0a,
	}

	mag1, mag2 *usbci.Magtek
	gen1, gen2 *usbci.Generic

	magChanges = make([][]string, 2)

	ClogCh1 = `"SoftwareID" was "21042840G01", now "21042840G02"`
	ClogCh2 = `"USBSpec" was "1.10", now "2.00"`

	mux sync.Mutex
)

func init() {
	magChanges[0] = []string{`SoftwareID`, `21042840G01`, `21042840G02`}
	magChanges[1] = []string{`USBSpec`, `1.10`, `2.00`}
}

func TestMain(m *testing.M) {

	var err error

	flag.Parse()

	if conf, err = newConfig(`config.json`); err != nil {
		log.Fatalf(err.Error())
	}

	conf.Logging.Console = false
	slog, clog, elog = newLoggers()

	if err = createObjects(); err != nil {
		log.Fatal(err)
	}

	os.Exit(m.Run())
}

func createObjects() (err error) {

	if mag1, err = usbci.NewMagtek(nil); err != nil {
		return err
	}

	if mag2, err = usbci.NewMagtek(nil); err != nil {
		return err
	}

	if gen1, err = usbci.NewGeneric(nil); err != nil {
		return err
	}

	if gen2, err = usbci.NewGeneric(nil); err != nil {
		return err
	}

	if err = mag1.RestoreJSON(mag1JSON); err != nil {
		return err
	}

	if err = mag2.RestoreJSON(mag2JSON); err != nil {
		return err
	}

	if err = gen1.RestoreJSON(gen1JSON); err != nil {
		return err
	}

	if err = gen2.RestoreJSON(gen2JSON); err != nil {
		return err
	}

	return err
}

func resetFlags(tb testing.TB) {

	tb.Helper()

	*fActionAudit = false
	*fActionCheckin = false
	*fActionLegacy = false
	*fActionReport = false
	*fActionReset = false
	*fActionSerial = false

	*fReportFolder = conf.Paths.ReportDir
	*fReportConsole = false
	*fReportFormat = ``

	*fSerialCopy = false
	*fSerialErase = false
	*fSerialForce = false
	*fSerialFetch = false
	*fSerialSet = ``

	*fAuditLocal = false
	*fAuditServer = false
}

func restoreState(tb testing.TB) {

	tb.Helper()

	if err := createObjects(); err != nil {
		tb.Fatal(err)
	}
}

func getMagtekDevice(tb testing.TB, c *gousb.Context) (mdev *usbci.Magtek, err error) {

	tb.Helper()

	dev, err := c.OpenDeviceWithVIDPID(0x0801, 0x0001)

	if dev != nil {
		mdev, err = usbci.NewMagtek(dev)
	}

	return mdev, err
}

